[{"title":"那些年使用Git走过的坑","url":"/2017/10/24/那些年使用Git走过的坑/","content":"## Git介绍\n&ensp;&ensp;Git是一种世界上最先进的分布式版本管理系统（没有之一），特点就是高端、大气上档次。那么什么是版本控制呢，通俗一点说就是可以记录你对文件每一次改动的都进行记录。\n&ensp;&ensp;下面就来介绍一下Git的工作流程：\n![Git工作流程][1]\n\n\n  &ensp;&ensp;可以看到主要分为工作区和版本库两大部分，其中工作区也就是我们本地的文件夹，版本库也就是Git的内部存储，也可以看作是电脑的硬盘。\n  \n  ![Git工作流程][2]\n\n\n  &ensp;&ensp;可以看到，工作流程就是在工作区进行文件的修改，然后使用 git add 实现将修改推送到暂存区，但是这并不会被推送到版本库内。\n  ![Git工作流程][3]\n\n\n  &ensp;&ensp;最终需要通过 git commit 命令来对之前在暂存区内的更改，提交到版本库，然后就可以进行版本库到远端的传输。\n## Git的基本操作\n\n 1. 如何实现将本地代码部署到GitHub上？\n \n\n``` stylus\n1. Github New Project 【ProjectName】（下称PN）\n2. Copy PN的git地址\n3. 切到本地终端，cd到Project下\n4. git init\n5. git remote add origin 【Copy的url】\n6. git add .\n7. git commit -m \"Init Project\"\n8. git pull —rebase origin master（Github上New Project的时候如果初始化了READ.MD就要走这一步，否则不用；默认不会初始化的）\n9. git push origin master\n\n```\n\n\n 2. 如何将别人GitHub上的工程下载下来然后自己修改后再上传上去？\n \n\n``` stylus\n1. git clone URL 到本地\n2. 修改了本地的a.py文件\n3. git add .\n4. git commit -m \"update a.py\"     # 是为了将改动提交到本地git\n5. git pull —rebase origin master   # 是为了拉远端代码到本地\n6. git push origin master               # 是为了推本地代码到远端\n注意第5步，之所以要进行，是因为可能你改动a.py的同时，我也改动了a.py，然后我比你先推上去这个时候你如果不pull远端的代码就直接覆盖了。\n\n```\n\n\n 3. 如何回退到之前的版本，并实现远端和本地的回退？\n \n\n``` stylus\n1.git status\n2. git pull —rebase origin master\n3. git status\n4. git log   #找出你要回退的commit ID  \n5. #git reset —hard [上一步的commitID]  当然也可以使用 --hard HEAD^ 来逐个查询\n6. git status   #执行完此步后可以看你的文件是不是返回到了修改之前\n7. git push origin master -f     #如果不强推可以实现那就不用加 -f\n\n```\n更多重要的内容可以参照[廖雪峰的Git教程][4]，这样将有助于更好的了解Git的相关知识，让你更便捷的管理你的文件。\n\n\n\n\n  [1]: ./images/SXJULG@_2~TFR%7D%7B9X2Z9FHH.png \"SXJULG@_2~TFR}{9X2Z9FHH\"\n  [2]: ./images/G%7B8VWHF33X50KN@@2%7BB%5BL3P.png\n  [3]: ./images/M@%60%60@$O_Z_%5DR29YA9KIFVGU.png \"M@``@$O_Z_]R29YA9KIFVGU\"\n  [4]: https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000","tags":["Git,Github"]},{"title":"Python中关于str( )函数和repr( )的那些事","url":"/2017/10/12/Python中关于str（）函数和repr（）函数的那些事/","content":"相信很多小伙伴跟我一样，对于Python中的str函数和repr函数，有很多地方都是很不解，博主也是这样，于是决定从最开始的文档，然后一个一个print去看结果然后，就这样一直print，print总算是大致上理解其区别，话不多少直接上例子。\n\n Python中的str( )和repr( )两个函数的区别，都是可以将任意的值转化为字符串：函数str( )将其转化成为适于人阅读的形式，而repr(object)就是转换成为阅读器阅读的形式， 返回一个可以用来表示对象的可打印字符串，用eval( )函数还可以返回相应的对象，下面直接上例子来说明这两个函数的用法。\n \n### **对于字符串：  a = 'hello, world!\\n'**  \n \n\n```\n>>> a\n'hello, world!\\n'     #输出的a本来的模样\n>>> print(a)          #对a经过加工后输出，将转义字符进行转义\nhello,world!\n>>> print(str(a))     #可以看到对str返回的值进行print处理，这将与直接print（a）得到相同的结果\nhello,world!    \n>>> repr(a)           #获得一种机器阅读的形式，也就是这个变量背地里是什么样子的。\n\"'hello, world!\\n'\"\n>>> print(repr(a))    #对于repr返回的值进行print处理，可以看到这与直接在终端输入a，得到的是相同的结果\n'hello,world!\\n'\n\n```\n以上就是最基本的在字符串的显示中的使用，对应指令和输出结果及注释相信大家很容易都能看明白，接下来说一下这两个函数另外的作用。\n\n###**在类中的使用，可以定义一些在实例运行时，控制repr()函数作用在其实例上时的行为。**\n \n\n```\nclass test(object):\n     def __init__(self, data):\n          self.data = data\n\n仅仅是这样的话我们进行如下操作：\n\n>>> t = test(100)\n>>> t\n<__main__.test at 0x4db85f8>\n>>> print(t)\n<__main__.test at 0x4db85f8>\n>>> str(t)\n'<__main__.test at 0x4db85f8>'\n>>> repr(t)\n'<__main__.test at 0x4db85f8>'\n\n```\n在类中没有方法的时候，如果直接在终端输入类的实例，不会输出任何东西的，上面显示的内容是由于类的特殊方法（基本定制型）有__str__()和__repr__()， 在print(object)和直接运行实例的时候回打印字符串。如果没有实现（覆盖）该函数，就会出现上面的结果。\n\n那我们定义一个str函数来看看效果：\n\n```\nclass test(object):\n     def __init__(self, data):\n          self.data = data\n     def __str__(self):\n          return \"ss\"\n\n>>> t = test(100)\n>>> t\n<__main__.test at 0x4db85f8>\n>>> str(t)\n'ss'\n>>>print(t)\nss\n>>>repr(t)\n<__main__.test at 0x4db85f8>\n\n\n```\n\n可以看到在这里直接输入t还会跟上面的例子的结果一致，但是str（t）和print(t)已经发生了改变，不难看出显示的是我们在类中定义的__str__()函数的返回值，而rerp(t)还是 跟上个例子一样，下面我们也来实现一个__str__()函数来看一看效果。\n\n```\n\nclass test(object):\n     def __init__(self, data):\n          self.data = data\n     def __str__(self):\n          return \"ss\"\n     def __repr__(self):\n          return \"gg\"\n\n>>> t = test(100)\n>>> t\ngg\n>>> str(t)\n'ss'\n>>>print(t)\nss\n>>>repr(t)\n'gg'\n>>> print(repr(t))\ngg\n\n```\n\n好了，可以很清楚的明白，默认的__str__() __repr__()函数与重构后的区别，以及这两者与直接输入和经过print处理以后的关系了吧。\n也就是直接在终端输入对象，相当于调用print（repr(oblect))函数，如果没有被复写则会出现上面最开始的那种显示形式；而print(object)函数相当于调用了print(str(object))这个函数，如果没有被复写就是使用的默认的，也会出现上面的显示结果。\n\n下面还有一个对于__repr__( )函数的说明：\nPython中这个_repr_函数，对应repr(object)这个函数，返回一个可以用来表示对象的可打印字符串：\n\n> 1.尝试生成这样一个字符串，将其传给 eval()可重新生成同样的对象 ；\n> 2.否则，生成用尖括号包住的字符串，包含类型名和额外的信息(比如地址) ；\n> 3.一个类(class)可以通过 __repr__() 成员来控制repr()函数作用在其实例上时的行为。\n\nPython中，有的操作符和函数是做同样的事情，原因是某些场合下函数会比操作符更适合使用，比如函数对象可作为参数传递。\n\n希望我的文章能够帮到你，喜欢的可以点一波关注！！您的支持是博主坚持的动力~~~"}]