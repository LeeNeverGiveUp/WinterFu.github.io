{"meta":{"title":"Zz_krystal的博客","subtitle":"以梦为马不负韶华","description":"NEU小硕一只，攻于机器学习、数据挖掘、深度学习，业余歌手，爱生活，爱音乐！","author":"Winter Fu","url":"http://winterfu.github.io"},"pages":[{"title":"about","date":"2017-11-28T11:18:43.000Z","updated":"2017-11-29T09:04:32.130Z","comments":true,"path":"about/index.html","permalink":"http://winterfu.github.io/about/index.html","excerpt":"","text":"以梦为马，不负韶华。 Winter，勤耕于燕山，研读于沈城热爱音乐与运动，目前是一枚小硕胆小认生，不易相处，年轻无为，卖马为生。 -MoreTheme - NayoGithub - WinterFuAuther - Zz-KrystalLocation - [NEU | ShenYang CN]Email - [fuwinterdong@gmail.com]"},{"title":"tag","date":"2017-11-28T11:18:28.000Z","updated":"2017-11-28T11:28:13.617Z","comments":true,"path":"tags/index.html","permalink":"http://winterfu.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-11-28T11:12:22.000Z","updated":"2017-11-28T11:13:22.716Z","comments":true,"path":"categories/index.html","permalink":"http://winterfu.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"那些年使用Git走过的坑","slug":"那些年使用Git走过的坑","date":"2017-11-28T13:43:31.000Z","updated":"2017-11-28T14:18:06.298Z","comments":true,"path":"2017/11/28/那些年使用Git走过的坑/","link":"","permalink":"http://winterfu.github.io/2017/11/28/那些年使用Git走过的坑/","excerpt":"","text":"Git介绍&ensp;&ensp;Git是一种世界上最先进的分布式版本管理系统（没有之一），特点就是高端、大气上档次。那么什么是版本控制呢，通俗一点说就是可以记录你对文件每一次改动的都进行记录。&ensp;&ensp;下面就来介绍一下Git的工作流程： &ensp;&ensp;可以看到主要分为工作区和版本库两大部分，其中工作区也就是我们本地的文件夹，版本库也就是Git的内部存储，也可以看作是电脑的硬盘。 &ensp;&ensp;可以看到，工作流程就是在工作区进行文件的修改，然后使用 git add 实现将修改推送到暂存区，但是这并不会被推送到版本库内。 &ensp;&ensp;最终需要通过 git commit 命令来对之前在暂存区内的更改，提交到版本库，然后就可以进行版本库到远端的传输。 Git的基本操作 如何实现将本地代码部署到GitHub上？ 1234567891. Github New Project 【ProjectName】（下称PN）2. Copy PN的git地址3. 切到本地终端，cd到Project下4. git init5. git remote add origin 【Copy的url】6. git add .7. git commit -m \"Init Project\"8. git pull —rebase origin master（Github上New Project的时候如果初始化了READ.MD就要走这一步，否则不用；默认不会初始化的）9. git push origin master 如何将别人GitHub上的工程下载下来然后自己修改后再上传上去？ 12345671. git clone URL 到本地2. 修改了本地的a.py文件3. git add .4. git commit -m \"update a.py\" # 是为了将改动提交到本地git5. git pull —rebase origin master # 是为了拉远端代码到本地6. git push origin master # 是为了推本地代码到远端注意第5步，之所以要进行，是因为可能你改动a.py的同时，我也改动了a.py，然后我比你先推上去这个时候你如果不pull远端的代码就直接覆盖了。 如何回退到之前的版本，并实现远端和本地的回退？ 12345671.git status2. git pull —rebase origin master3. git status4. git log #找出你要回退的commit ID 5. #git reset —hard [上一步的commitID] 当然也可以使用 --hard HEAD^ 来逐个查询6. git status #执行完此步后可以看你的文件是不是返回到了修改之前7. git push origin master -f #如果不强推可以实现那就不用加 -f 更多重要的内容可以参照廖雪峰的Git教程，这样将有助于更好的了解Git的相关知识，让你更便捷的管理你的文件。","categories":[{"name":"教程","slug":"教程","permalink":"http://winterfu.github.io/categories/教程/"}],"tags":[{"name":"Git,Github","slug":"Git-Github","permalink":"http://winterfu.github.io/tags/Git-Github/"}]},{"title":"Python中关于str（）函数和repr（）函数的那些事","slug":"Python中关于str（）函数和repr（）函数的那些事","date":"2017-11-28T13:34:40.000Z","updated":"2017-11-28T13:37:48.598Z","comments":true,"path":"2017/11/28/Python中关于str（）函数和repr（）函数的那些事/","link":"","permalink":"http://winterfu.github.io/2017/11/28/Python中关于str（）函数和repr（）函数的那些事/","excerpt":"","text":"相信很多小伙伴跟我一样，对于Python中的str函数和repr函数，有很多地方都是很不解，博主也是这样，于是决定从最开始的文档，然后一个一个print去看结果然后，就这样一直print，print总算是大致上理解其区别，话不多少直接上例子。 Python中的str( )和repr( )两个函数的区别，都是可以将任意的值转化为字符串：函数str( )将其转化成为适于人阅读的形式，而repr(object)就是转换成为阅读器阅读的形式， 返回一个可以用来表示对象的可打印字符串，用eval( )函数还可以返回相应的对象，下面直接上例子来说明这两个函数的用法。 对于字符串： a = ‘hello, world!\\n’12345678910&gt;&gt;&gt; a&apos;hello, world!\\n&apos; #输出的a本来的模样&gt;&gt;&gt; print(a) #对a经过加工后输出，将转义字符进行转义hello,world!&gt;&gt;&gt; print(str(a)) #可以看到对str返回的值进行print处理，这将与直接print（a）得到相同的结果hello,world! &gt;&gt;&gt; repr(a) #获得一种机器阅读的形式，也就是这个变量背地里是什么样子的。&quot;&apos;hello, world!\\n&apos;&quot;&gt;&gt;&gt; print(repr(a)) #对于repr返回的值进行print处理，可以看到这与直接在终端输入a，得到的是相同的结果&apos;hello,world!\\n&apos; 以上就是最基本的在字符串的显示中的使用，对应指令和输出结果及注释相信大家很容易都能看明白，接下来说一下这两个函数另外的作用。 ###在类中的使用，可以定义一些在实例运行时，控制repr()函数作用在其实例上时的行为。 123456789101112131415class test(object): def __init__(self, data): self.data = data仅仅是这样的话我们进行如下操作：&gt;&gt;&gt; t = test(100)&gt;&gt;&gt; t&lt;__main__.test at 0x4db85f8&gt;&gt;&gt;&gt; print(t)&lt;__main__.test at 0x4db85f8&gt;&gt;&gt;&gt; str(t)&apos;&lt;__main__.test at 0x4db85f8&gt;&apos;&gt;&gt;&gt; repr(t)&apos;&lt;__main__.test at 0x4db85f8&gt;&apos; 在类中没有方法的时候，如果直接在终端输入类的实例，不会输出任何东西的，上面显示的内容是由于类的特殊方法（基本定制型）有str()和repr()， 在print(object)和直接运行实例的时候回打印字符串。如果没有实现（覆盖）该函数，就会出现上面的结果。 那我们定义一个str函数来看看效果： 123456789101112131415class test(object): def __init__(self, data): self.data = data def __str__(self): return &quot;ss&quot;&gt;&gt;&gt; t = test(100)&gt;&gt;&gt; t&lt;__main__.test at 0x4db85f8&gt;&gt;&gt;&gt; str(t)&apos;ss&apos;&gt;&gt;&gt;print(t)ss&gt;&gt;&gt;repr(t)&lt;__main__.test at 0x4db85f8&gt; 可以看到在这里直接输入t还会跟上面的例子的结果一致，但是str（t）和print(t)已经发生了改变，不难看出显示的是我们在类中定义的str()函数的返回值，而rerp(t)还是 跟上个例子一样，下面我们也来实现一个str()函数来看一看效果。 1234567891011121314151617181920class test(object): def __init__(self, data): self.data = data def __str__(self): return &quot;ss&quot; def __repr__(self): return &quot;gg&quot;&gt;&gt;&gt; t = test(100)&gt;&gt;&gt; tgg&gt;&gt;&gt; str(t)&apos;ss&apos;&gt;&gt;&gt;print(t)ss&gt;&gt;&gt;repr(t)&apos;gg&apos;&gt;&gt;&gt; print(repr(t))gg 好了，可以很清楚的明白，默认的str() repr()函数与重构后的区别，以及这两者与直接输入和经过print处理以后的关系了吧。也就是直接在终端输入对象，相当于调用print（repr(oblect))函数，如果没有被复写则会出现上面最开始的那种显示形式；而print(object)函数相当于调用了print(str(object))这个函数，如果没有被复写就是使用的默认的，也会出现上面的显示结果。 下面还有一个对于repr( )函数的说明：Python中这个repr函数，对应repr(object)这个函数，返回一个可以用来表示对象的可打印字符串： 1.尝试生成这样一个字符串，将其传给 eval()可重新生成同样的对象 ；2.否则，生成用尖括号包住的字符串，包含类型名和额外的信息(比如地址) ；3.一个类(class)可以通过 repr() 成员来控制repr()函数作用在其实例上时的行为。 Python中，有的操作符和函数是做同样的事情，原因是某些场合下函数会比操作符更适合使用，比如函数对象可作为参数传递。 希望我的文章能够帮到你，喜欢的可以点一波关注！！您的支持是博主坚持的动力~~~","categories":[{"name":"python学习","slug":"python学习","permalink":"http://winterfu.github.io/categories/python学习/"}],"tags":[{"name":"python,str,repr","slug":"python-str-repr","permalink":"http://winterfu.github.io/tags/python-str-repr/"}]}]}